/****************************************************************************

Copyright (c) 2000 - 2012 Novell, Inc.
All Rights Reserved.

This program is free software; you can redistribute it and/or
modify it under the terms of version 2 of the GNU General Public License as
published by the Free Software Foundation.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.   See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, contact Novell, Inc.

To contact Novell about this file by physical or electronic mail,
you may find current contact information at www.novell.com

****************************************************************************/
/**
 * Complex functions for dialogs handling
 */

{

    textdomain "sshd";

    import "Label";
    import "Popup";
    import "Wizard";
    import "Sshd";
    import "Confirm";
    import "Report";

    include "sshd/helps.ycp";

boolean ReallyExit () {
    // yes-no popup
    return Popup::YesNo (_("Really exit?
All changes will be lost."));
}

/**
 * Read settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol ReadDialog() {
	Wizard::RestoreHelp(HELPS["read"]:"");
	Wizard::SetDesktopTitleAndIcon("sshd");
	boolean ret = Sshd::Read();
	return ret ? `next : `abort;
}

/**
 * Write settings dialog
 * @return `abort if aborted and `next otherwise
 */
symbol WriteDialog() {
	Wizard::RestoreHelp(HELPS["write"]:"");
	Wizard::SetDesktopTitleAndIcon("sshd");
	boolean ret = Sshd::Write();
	return ret ? `next : `abort;
}

/**
 * Initializes the table of ports
 */

void InitPortsTable () {
    list <string> ports = Sshd::GetSSHDOption("Port");

    if (ports != nil && ports != []) {
	list <term> items = [];
	foreach (string port, ports, {
	    items = add (items, `item(`id(port), port));
	});

	// Redraw table of ports and enable modification buttons
	UI::ChangeWidget(`id("Port"), `Items, items);
	UI::ChangeWidget(`id("edit_port"), `Enabled, true);
	UI::ChangeWidget(`id("delete_port"), `Enabled, true);
    } else {
	// Redraw table of ports and disable modification buttons
	UI::ChangeWidget(`id("Port"), `Items, []);
	UI::ChangeWidget(`id("edit_port"), `Enabled, false);
	UI::ChangeWidget(`id("delete_port"), `Enabled, false);
    }
}

/*
 * Initializes Cipher Settings Table
 */

void InitCipherTable () {
	list <string> tmp_list = Sshd::GetDefaultSSHDOption ("Ciphers");
	list <string> defaults = sort (splitstring (tmp_list[0]:"", ", "));

	tmp_list = Sshd::GetSSHDOption ("Ciphers");
	list <string> current_ciphers = sort (splitstring (tmp_list[0]:"", ", "));

	// nil must have been set before
	// it says the item should be removed from config and use the 'default' settings
	if (tmp_list == nil)
	    current_ciphers = defaults;

	// ciphers to enable
	list <term> combobox_items = [];
	// all enabled ciphers
	list <term> table_items = [];

	// all default (known) ciphers
	foreach (string cipher, defaults, {
	    // cipher is enabled
	    if (contains (current_ciphers, cipher)) {
		table_items = add (table_items, `item (`id (cipher), cipher));
	    // cipher is disabled
	    } else {
		combobox_items = add (combobox_items, `item (`id (cipher), cipher));
	    }
	});

	UI::ChangeWidget (`id ("supported_ciphers"), `Items, combobox_items);
	UI::ChangeWidget (`id ("Ciphers"), `Items, table_items);

	// some cipher(s) are allowed -> allow removing them
	UI::ChangeWidget (`id ("remove_cipher"), `Enabled, (table_items != nil && size (table_items) > 0));
	UI::ChangeWidget (`id ("Ciphers"), `Enabled, (table_items != nil && size (table_items) > 0));

	// some cipher(s) are not allowed -> allow adding them
	UI::ChangeWidget (`id ("add_cipher"), `Enabled, (table_items != nil && size (combobox_items) > 0));
	UI::ChangeWidget (`id ("supported_ciphers"), `Enabled, (table_items != nil && size (combobox_items) > 0));
}

/*
 * Initializes Protocol Settings Dialog
 */

void InitProtocolVersion () {
	list <string> protocols = Sshd::GetSSHDOption("Protocol");

	if (protocols != nil && protocols != []) {
		switch(protocols[0]:""){
			case ("2,1"):
			case ("1,2"):  UI::ChangeWidget(`id("SSHv21"),`Value,true);
						break; 
			case ("2"): UI::ChangeWidget(`id("SSHv2"),`Value,true);
					  break;
			case ("1"): UI::ChangeWidget(`id("SSHv1"),`Value,true);
					  break;
		}
	}
}

void InitServerConfigurationDialog (string id) {
    InitPortsTable();

    foreach (string key, ["AllowTcpForwarding", "X11Forwarding", "Compression"], {
	UI::ChangeWidget(`id(key), `Value, (Sshd::GetSSHDOption(key) == ["yes"]));
    });
}

/*
 * Initializes the Login Settings Dialog
 */

void InitLoginSettingsDialog (string id) {
    UI::ChangeWidget( `id("MaxAuthTries"), `ValidChars, "0123456789");
    list <string> MaxAuthTries = Sshd::GetSSHDOption("MaxAuthTries");
    UI::ChangeWidget(`id("MaxAuthTries"), `Value, MaxAuthTries[0]:"0");

    foreach (string key, ["PrintMotd", "PermitRootLogin",
	/* "PasswordAuthentication", BNC #469207 */ "RSAAuthentication", "PubkeyAuthentication"], {
	    UI::ChangeWidget(`id(key), `Value, (Sshd::GetSSHDOption(key) == ["yes"]));
    });
}

/**
 * Removes the port from list of current ports
 *
 * @param string port_number
 */
void DeletePort (string port) {
    Sshd::SetSSHDOption("Port", filter (
	string single_port, Sshd::GetSSHDOption("Port"), ``(single_port != port)
    ));
}

/**
 * Function handles the adding or editing port number.
 * When the current_port is not 'nil', the dialog will
 * allow to edit it.
 *
 * @param string current_port a port number to be edited or 'nil' when adding a new one
 */
void AddEditPortDialog (string current_port) {
    UI::OpenDialog(`opt(`decorated), `VBox(
	`MinWidth (30,
	    `HBox(
		`HSpacing(1),
		`Frame(
		    (current_port == nil ?
		    /* A popup dialog caption */
		    _("Add New Port")
		    :
		    /* A popup dialog caption */
		    _("Edit Current Port")),
		    /* A text entry */
		    `TextEntry(`id("port_number"), _("&Port"), (current_port == nil ? "":current_port))
		),
		`HSpacing(1)
	    )
	),
	`VSpacing(1),
	`ButtonBox(
	    `PushButton(`id(`ok), `opt(`default), Label::OKButton()),
	    `PushButton(`id(`cancel), Label::CancelButton())
	)
    ));

    UI::ChangeWidget( `id("port_number"), `ValidChars, "0123456789");
    UI::SetFocus(`id("port_number"));

    any ret = nil;
    while (true) {
	ret = UI::UserInput();
	if (ret == `ok) {
	    string new_port = (string) UI::QueryWidget(`id("port_number"), `Value);

	    if (new_port == "") {
		UI::SetFocus(`id("port_number"));
		Report::Error(_("Port number must not be empty."));
		continue;
	    }

	    Sshd::SetSSHDOption("Port", add (Sshd::GetSSHDOption("Port"), new_port));

	    if (current_port != nil) DeletePort(current_port);
	}

	break;
    }

    UI::CloseDialog();
}

/**
 * Function handles Add, Edit and Delete buttons
 *
 * @param any action from "add_port", "edit_port" or "delete_port"
 */
symbol HandleServerConfigurationDialog (string id, map event) {
    any action = event["ID"]:nil;

    string selected_port = (string) UI::QueryWidget (`id("Port"), `CurrentItem);

    // Adding a new port
    if (action == "add_port") {
	AddEditPortDialog(nil);
    // Editing current port
    } else if (action == "edit_port") {
	AddEditPortDialog(selected_port);
    // Deleting current port
    } else if (action == "delete_port") {
	if (Confirm::DeleteSelected()) DeletePort (selected_port);
    }

    InitPortsTable();

    return nil;
}



/**
 * Stores the current configuration from Server Configuration Dialog
 */
void StoreServerConfigurationDialog (string id, map event) {
    Sshd::SetModified();

    // Stores all boolean values and turns them to the "yes"/"no" notation
    foreach (string key, ["AllowTcpForwarding", "X11Forwarding", "Compression"], {
    Sshd::SetSSHDOption(
    key,
    [ (((boolean) UI::QueryWidget(`id(key), `Value) == true) ? "yes":"no") ]
    );
    });
    }

void StoreProtocolConfigurationDialog (string id, map event) {
	Sshd::SetModified();

	string current = (string) UI::QueryWidget(`id(`rb), `CurrentButton);

	switch (current){
		case("SSHv21"): Sshd::SetSSHDOption("Protocol", [ "2,1" ]);
					break;
		case("SSHv2"): Sshd::SetSSHDOption("Protocol", [ "2" ]);
					break;
		case("SSHv1"): Sshd::SetSSHDOption("Protocol", [ "1" ]);
					break;

	}
}

symbol HandleProtocolConfigurationDialog (string id, map event) {
    any action = event["ID"]:nil;

    list <string> tmp_list = Sshd::GetSSHDOption ("Ciphers");

    // nil must have been set before
    // it says the item should be removed from config and use the 'default' settings
    if (tmp_list == nil)
	tmp_list = Sshd::GetDefaultSSHDOption ("Ciphers");

    list <string> ciphers = sort (splitstring (tmp_list[0]:"", ", "));
    list <string> backup = ciphers;

    if (action == "remove_cipher") {
	string cipher_to_remove = (string) UI::QueryWidget (`id ("Ciphers"), `CurrentItem);
	if (Confirm::Delete (cipher_to_remove)) {
	    y2milestone ("Removing: %1", cipher_to_remove);

	    ciphers = filter (string one_cipher, ciphers, {
		return (one_cipher != cipher_to_remove);
	    });
	}
    } else if (action == "add_cipher") {
	string cipher_to_add = (string) UI::QueryWidget (`id ("supported_ciphers"), `Value);
	y2milestone ("Adding: %1", cipher_to_add);

	if (cipher_to_add != nil) {
	    ciphers = toset (add (ciphers, cipher_to_add));
	}
    }

    // Nothing has changed
    if (ciphers == backup) {
	return nil;
    }

    if (ciphers != nil) {
	list <string> tmp_list = Sshd::GetDefaultSSHDOption ("Ciphers");
	list <string> defaults = sort (splitstring (tmp_list[0]:"", ", "));

	// the default ciphers -> remove the entry completely
	if (ciphers == defaults) {
	    Sshd::SetSSHDOption ("Ciphers", nil);
	} else {
	    Sshd::SetSSHDOption ("Ciphers", [mergestring (ciphers, ",")]);
	}
    } else {
	y2error ("Ciphers: %1", ciphers);
    }

    InitCipherTable();

    return nil;
}

/**
 * Stores the current configuration from Login Settings  Dialog
 */
void StoreLoginSettingsDialog (string id, map event) {
    Sshd::SetModified();

    // Stores an integer value as a string
    Sshd::SetSSHDOption(
	"MaxAuthTries",
	[ (string) UI::QueryWidget(`id("MaxAuthTries"), `Value) ]
    );

    // Stores all boolean values and turns them to the "yes"/"no" notation
    foreach (string key, ["PrintMotd", "PermitRootLogin",
	/* "PasswordAuthentication", BNC #469207 */ "RSAAuthentication", "PubkeyAuthentication"], {
	    Sshd::SetSSHDOption(
		key,
		[ (((boolean) UI::QueryWidget(`id(key), `Value) == true) ? "yes":"no") ]
	    );
    });
}

void InitProtocolConfigurationDialog (string id) {
    InitProtocolVersion();
    InitCipherTable();
}

}
